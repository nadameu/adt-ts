import { array as A, pipe } from '../src';

test('Generate type description', () => {
  const ends = A.range(-1)(19);
  const defs = ends.map(
    pipe(
      A.range(-1),
      xs => xs.map(i => `x${i}`),
      range => {
        range[0] = 'a';
        if (range.length > 1) range[range.length - 1] = 'b';
        const letters = range.join(', ');
        const pairs = Array.from(range)
          .map((a, i, as) => [a, as[i + 1]] as [string, string | undefined])
          .filter((x): x is [string, string] => x[1] !== undefined);
        const fns = pairs.map(([a, b], i) => `f${i}: (_: ${a}) => ${b}`);
        const first = range[0];
        const last = range[range.length - 1];
        return fns.length === 0
          ? `(): <${letters}>(_: ${first}) => ${last};`
          : `<${letters}>(${fns.join(', ')}): (_: ${first}) => ${last};`;
      }
    )
  );
  const z = `export interface Pipe {\n${defs.map(x => `  ${x}`).join('\n')}\n}`;
  expect(z).toMatchInlineSnapshot(`
    "export interface Pipe {
      (): <a>(_: a) => a;
      <a, b>(f0: (_: a) => b): (_: a) => b;
      <a, x0, b>(f0: (_: a) => x0, f1: (_: x0) => b): (_: a) => b;
      <a, x0, x1, b>(f0: (_: a) => x0, f1: (_: x0) => x1, f2: (_: x1) => b): (_: a) => b;
      <a, x0, x1, x2, b>(f0: (_: a) => x0, f1: (_: x0) => x1, f2: (_: x1) => x2, f3: (_: x2) => b): (_: a) => b;
      <a, x0, x1, x2, x3, b>(f0: (_: a) => x0, f1: (_: x0) => x1, f2: (_: x1) => x2, f3: (_: x2) => x3, f4: (_: x3) => b): (_: a) => b;
      <a, x0, x1, x2, x3, x4, b>(f0: (_: a) => x0, f1: (_: x0) => x1, f2: (_: x1) => x2, f3: (_: x2) => x3, f4: (_: x3) => x4, f5: (_: x4) => b): (_: a) => b;
      <a, x0, x1, x2, x3, x4, x5, b>(f0: (_: a) => x0, f1: (_: x0) => x1, f2: (_: x1) => x2, f3: (_: x2) => x3, f4: (_: x3) => x4, f5: (_: x4) => x5, f6: (_: x5) => b): (_: a) => b;
      <a, x0, x1, x2, x3, x4, x5, x6, b>(f0: (_: a) => x0, f1: (_: x0) => x1, f2: (_: x1) => x2, f3: (_: x2) => x3, f4: (_: x3) => x4, f5: (_: x4) => x5, f6: (_: x5) => x6, f7: (_: x6) => b): (_: a) => b;
      <a, x0, x1, x2, x3, x4, x5, x6, x7, b>(f0: (_: a) => x0, f1: (_: x0) => x1, f2: (_: x1) => x2, f3: (_: x2) => x3, f4: (_: x3) => x4, f5: (_: x4) => x5, f6: (_: x5) => x6, f7: (_: x6) => x7, f8: (_: x7) => b): (_: a) => b;
      <a, x0, x1, x2, x3, x4, x5, x6, x7, x8, b>(f0: (_: a) => x0, f1: (_: x0) => x1, f2: (_: x1) => x2, f3: (_: x2) => x3, f4: (_: x3) => x4, f5: (_: x4) => x5, f6: (_: x5) => x6, f7: (_: x6) => x7, f8: (_: x7) => x8, f9: (_: x8) => b): (_: a) => b;
      <a, x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, b>(f0: (_: a) => x0, f1: (_: x0) => x1, f2: (_: x1) => x2, f3: (_: x2) => x3, f4: (_: x3) => x4, f5: (_: x4) => x5, f6: (_: x5) => x6, f7: (_: x6) => x7, f8: (_: x7) => x8, f9: (_: x8) => x9, f10: (_: x9) => b): (_: a) => b;
      <a, x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, b>(f0: (_: a) => x0, f1: (_: x0) => x1, f2: (_: x1) => x2, f3: (_: x2) => x3, f4: (_: x3) => x4, f5: (_: x4) => x5, f6: (_: x5) => x6, f7: (_: x6) => x7, f8: (_: x7) => x8, f9: (_: x8) => x9, f10: (_: x9) => x10, f11: (_: x10) => b): (_: a) => b;
      <a, x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, b>(f0: (_: a) => x0, f1: (_: x0) => x1, f2: (_: x1) => x2, f3: (_: x2) => x3, f4: (_: x3) => x4, f5: (_: x4) => x5, f6: (_: x5) => x6, f7: (_: x6) => x7, f8: (_: x7) => x8, f9: (_: x8) => x9, f10: (_: x9) => x10, f11: (_: x10) => x11, f12: (_: x11) => b): (_: a) => b;
      <a, x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, b>(f0: (_: a) => x0, f1: (_: x0) => x1, f2: (_: x1) => x2, f3: (_: x2) => x3, f4: (_: x3) => x4, f5: (_: x4) => x5, f6: (_: x5) => x6, f7: (_: x6) => x7, f8: (_: x7) => x8, f9: (_: x8) => x9, f10: (_: x9) => x10, f11: (_: x10) => x11, f12: (_: x11) => x12, f13: (_: x12) => b): (_: a) => b;
      <a, x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, b>(f0: (_: a) => x0, f1: (_: x0) => x1, f2: (_: x1) => x2, f3: (_: x2) => x3, f4: (_: x3) => x4, f5: (_: x4) => x5, f6: (_: x5) => x6, f7: (_: x6) => x7, f8: (_: x7) => x8, f9: (_: x8) => x9, f10: (_: x9) => x10, f11: (_: x10) => x11, f12: (_: x11) => x12, f13: (_: x12) => x13, f14: (_: x13) => b): (_: a) => b;
      <a, x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, b>(f0: (_: a) => x0, f1: (_: x0) => x1, f2: (_: x1) => x2, f3: (_: x2) => x3, f4: (_: x3) => x4, f5: (_: x4) => x5, f6: (_: x5) => x6, f7: (_: x6) => x7, f8: (_: x7) => x8, f9: (_: x8) => x9, f10: (_: x9) => x10, f11: (_: x10) => x11, f12: (_: x11) => x12, f13: (_: x12) => x13, f14: (_: x13) => x14, f15: (_: x14) => b): (_: a) => b;
      <a, x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, b>(f0: (_: a) => x0, f1: (_: x0) => x1, f2: (_: x1) => x2, f3: (_: x2) => x3, f4: (_: x3) => x4, f5: (_: x4) => x5, f6: (_: x5) => x6, f7: (_: x6) => x7, f8: (_: x7) => x8, f9: (_: x8) => x9, f10: (_: x9) => x10, f11: (_: x10) => x11, f12: (_: x11) => x12, f13: (_: x12) => x13, f14: (_: x13) => x14, f15: (_: x14) => x15, f16: (_: x15) => b): (_: a) => b;
      <a, x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, b>(f0: (_: a) => x0, f1: (_: x0) => x1, f2: (_: x1) => x2, f3: (_: x2) => x3, f4: (_: x3) => x4, f5: (_: x4) => x5, f6: (_: x5) => x6, f7: (_: x6) => x7, f8: (_: x7) => x8, f9: (_: x8) => x9, f10: (_: x9) => x10, f11: (_: x10) => x11, f12: (_: x11) => x12, f13: (_: x12) => x13, f14: (_: x13) => x14, f15: (_: x14) => x15, f16: (_: x15) => x16, f17: (_: x16) => b): (_: a) => b;
      <a, x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, b>(f0: (_: a) => x0, f1: (_: x0) => x1, f2: (_: x1) => x2, f3: (_: x2) => x3, f4: (_: x3) => x4, f5: (_: x4) => x5, f6: (_: x5) => x6, f7: (_: x6) => x7, f8: (_: x7) => x8, f9: (_: x8) => x9, f10: (_: x9) => x10, f11: (_: x10) => x11, f12: (_: x11) => x12, f13: (_: x12) => x13, f14: (_: x13) => x14, f15: (_: x14) => x15, f16: (_: x15) => x16, f17: (_: x16) => x17, f18: (_: x17) => b): (_: a) => b;
      <a, x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, b>(f0: (_: a) => x0, f1: (_: x0) => x1, f2: (_: x1) => x2, f3: (_: x2) => x3, f4: (_: x3) => x4, f5: (_: x4) => x5, f6: (_: x5) => x6, f7: (_: x6) => x7, f8: (_: x7) => x8, f9: (_: x8) => x9, f10: (_: x9) => x10, f11: (_: x10) => x11, f12: (_: x11) => x12, f13: (_: x12) => x13, f14: (_: x13) => x14, f15: (_: x14) => x15, f16: (_: x15) => x16, f17: (_: x16) => x17, f18: (_: x17) => x18, f19: (_: x18) => b): (_: a) => b;
    }"
  `);
});
